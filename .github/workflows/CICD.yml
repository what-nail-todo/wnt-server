name: what-nail-todo CI & CD

on:
  push:
    branches: ["main"]

jobs:
  build:
    name: Build Spring jar file & Push at Docker hub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up application-prod.yml with secret
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application-prod.yml
        env:
          spring.datasource.url: ${{secrets.MYSQL_URL}}
          spring.datasource.username: ${{secrets.MYSQL_USERNAME}}
          spring.datasource.password: ${{secrets.MYSQL_PASSWORD}}

          spring.data.redis.host: ${{secrets.REDIS_HOST}}
          spring.data.redis.password: ${{secrets.REDIS_PASSWORD}}

          spring.security.jwt.access-token.expired-time: ${{secrets.ACCESS_TOKEN_EXPIRED_TIME}}
          spring.security.jwt.refresh-token.expired-time: ${{secrets.REFRESH_TOKEN_EXPIRED_TIME}}
          spring.security.jwt.secret: ${{secrets.JWT_SECRET}}

          spring.oauth2.client.registration.google.client-id: ${{secrets.OAUTH_GOOGLE_CLIENT_ID}}
          spring.oauth2.client.registration.google.client-secret: ${{secrets.OAUTH_GOOGLE_CLIENT_SECRET}}

          spring.oauth2.client.registration.naver.client-id: ${{secrets.OAUTH_NAVER_CLIENT_ID}}
          spring.oauth2.client.registration.naver.client-secret: ${{secrets.OAUTH_NAVER_CLIENT_SECRET}}

          spring.oauth2.client.registration.kakao.client-id: ${{secrets.OAUTH_KAKAO_CLIENT_ID}}
          spring.oauth2.client.registration.kakao.client-secret: ${{secrets.OAUTH_KAKAO_CLIENT_SECRET}}

          spring.mail.username: ${{secrets.MAIL_SERVER_USERNAME}}
          spring.mail.password: ${{secrets.MAIL_SERVER_PASSWORD}}

          server.port: ${{secrets.SERVER_PORT}}


      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test -i --no-daemon -Dspring.profiles.active=prod

      - name: Login to Docker hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_HUB_USERNAME}}
          password: ${{secrets.DOCKER_HUB_PASSWORD}}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/what-nail-todo-server:latest .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/what-nail-todo-server:latest

  deploy:
    name: Deploy to AppCenter server
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Copy docker-compose.yml to AppCenter server
        uses: appleboy/scp-action@master
        with:
          host: ${{secrets.APPCENTER_SERVER_IP}}
          username: ${{secrets.APPCENTER_SERVER_USERNAME}}
          key: ${{secrets.APPCENTER_SERVER_KEY}}
          port: ${{secrets.APPCENTER_SERVER_PORT}}
          source: "docker-compose.yml"
          target: "/home/serverking/what-nail-todo"

      - name: Deploy to AppCenter server
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.APPCENTER_SERVER_IP}}
          username: ${{secrets.APPCENTER_SERVER_USERNAME}}
          key: ${{secrets.APPCENTER_SERVER_KEY}}
          port: ${{secrets.APPCENTER_SERVER_PORT}}
          script: |
            cd /home/serverking/what-nail-todo
            
            echo "DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}" > .env
            echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env

            if [ "$(docker ps -aq -f name=what-nail-todo-server)" ]; then
              docker stop what-nail-todo-server
              docker rm what-nail-todo-server
            fi

            if [ "$(docker ps -aq -f name=what-nail-todo-redis)" ]; then
              docker stop what-nail-todo-redis
              docker rm what-nail-todo-redis
            fi

            docker-compose pull
            docker-compose up -d
